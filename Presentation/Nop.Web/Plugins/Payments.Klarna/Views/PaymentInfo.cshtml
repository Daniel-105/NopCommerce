@using Nop.Web.Framework.UI;
@model Nop.Web.Models.ShoppingCart.ShoppingCartModel

@{
    Layout = "";
    @inject INopHtmlHelper NopHtml

    NopHtml.AppendPageCssClassParts("html-shopping-cart-page");
}

<style>
    .klarnaBtn {
        width: 500px;
        height: 50px;
        margin: auto;
        cursor: pointer;
        background-color: #c98f8b;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        font-weight: 700;
        font-size: 20px;
    }
</style>


<div id="klarna_container" style="width: 500px; margin: auto;"></div>

<div style="width: 500px; margin: 20px auto ;">
    <!--Button to trigger authorize call-->
    <div id="klarnaRequest" class="klarnaBtn">Klarna Payment</div>
</div>

@* TODO: Uncomment this and see if the table is styled correctly
    <div class="section order-summary">
    <div class="title">
        <strong>@T("Checkout.OrderSummary")</strong>
    </div>
    @await Component.InvokeAsync("OrderSummary", "ShoppingCart")
</div>
 *@

<!script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></!script>
<!script type="text/javascript" src="//x.klarnacdn.net/kp/lib/v1/api.js" async></!script>

<script type="text/javascript">

    let klarnaRequest = document.querySelector("#klarnaRequest");
    let authorizationToken = "";
    let jsonDataResponse = "";
    let modelItems = @Html.Raw(Json.Serialize(Model.Items));
    let jsonDataC = "";
    let jsonStringData = "";

    $(document).ready(function () {
        $('.payment-info-next-step-button').hide();
    });

    $(document).on('accordion_section_opened', function (data) {
        if (data.currentSectionId != 'opc-payment_info') {
            $('.payment-info-next-step-button').show();
        }
    });

    $(document).ready(function () {
        // console.log("You clicked the button");
        $.ajax({
            type: "POST",
            url: "/GetClientToken",
            success: function (data) {

                if (data.ResponseContent == undefined) {
                    alert("Há algo de errado com o método de pagamento que escolheu. Por favor contacte o administrador da loja, ou escolha outro método de pagamento");
                    window.location = "/";
                } else {
                    dataResponse = JSON.parse(data.ResponseContent);
                    jsonDataC = JSON.parse(data.jsonData);
                    jsonStringData = data.jsonData;
                    let client_token = dataResponse.client_token;
                    let identifier = dataResponse.payment_method_categories[0].identifier;
                    // console.log(dataResponse);
                    // console.log(jsonDataC);
                    // console.log(client_token);
                    // console.log(identifier);
                    createSession(client_token, identifier);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("An error occurred:", errorThrown);
            }
        });
    });


    function createSession(client_token, identifier) {
        //The following method initializes the Klarna Payments JS library
        klarnaAsyncCallback = function () {
            Klarna.Payments.init({
                client_token: client_token
            });
            // console.log("Payments initialized");
            //The following method loads the payment_method_category in the container with the id of 'klarna_container'
            Klarna.Payments.load({
                container: '#klarna_container',
                payment_method_category: identifier

            },
                function (res) {
                    // console.log("Load function called")
                    // console.debug(res);
                    jsonDataResponse = res;
                });
        };
        klarnaAsyncCallback();
    }

    klarnaRequest.addEventListener("click", () => {

        Klarna.Payments.authorize({
            payment_method_category: 'pay_later'
        }, jsonStringData,
            function (res) {
                // console.log("Response from the authorize call:");
                // console.log(res);
                authorizationToken = res["authorization_token"];
                // console.log(authorizationToken);
                if (authorizationToken) {
                    confirm();
                } else {
                    alert("Sorry there was a problem with the payment");
                    window.location = "/";
                }
            })
    });

    function confirm() {
        // console.log(authorizationToken);
        let data = { "authorizationToken": authorizationToken }
        $.ajax({
            type: "POST",
            url: "/PlaceOrder",
            data: data,
            dataType: "text",
            success: function (response) {
                let parsedReponse = JSON.parse(JSON.parse(response));
                // console.log(response);

                // console.log(typeof parsedReponse);
                // console.log(parsedReponse.fraud_status);
                if (parsedReponse.fraud_status == "ACCEPTED") {
                    sendToPaymentProcessor();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Something went wrong!',
                    })
                    // window.location.href = "/checkout/completed";
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("An error occurred:", errorThrown);
            }
        });

    }

    //TODO verificar valor recaptcha
    function sendToPaymentProcessor() {
        var url = "@Url.Action("Confirm", "Checkout")";
        $.ajax({
            type: "POST",
            data: {
                captchaValid: true,
                existValid: "false"
            },
            url: url,
            success: function (response) {
                window.location.href = "/checkout/completed";
            }
        })
    }
</script>
